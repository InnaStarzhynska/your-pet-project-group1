{"version":3,"file":"static/js/606.03be2bbc.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.js","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import { Field } from 'formik';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { devices } from '../../constants/breakpoints';\nimport { colors } from 'constants/colors';\n\nexport const FormContainer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 40px 12px;\n  gap: 26px;\n  background-color: ${colors.whiteBgColor};\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n\n  border-radius: 20px;\n\n  @media screen and (${devices.mobile}) {\n    max-width: 480px;\n    border-radius: 40px;\n  }\n\n  @media screen and (${devices.tablet}) {\n    max-width: 608px;\n    padding: 60px 75px;\n    border-radius: 40px;\n    gap: 22px;\n  }\n\n  @media screen and (${devices.desktop}) {\n    gap: 8px;\n  }\n`;\n\nexport const Title = styled.h2`\n  box-sizing: border-box;\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 1.38;\n  color: ${colors.textColor};\n  margin-bottom: 20px;\n\n  @media screen and (${devices.tablet}) {\n    margin-bottom: 40px;\n    font-size: 36px;\n    letter: 4%;\n    font-weight: 500;\n  }\n`;\nexport const InputContainer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  /* margin-bottom: 24px; */\n`;\nexport const InputWrap = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  \n`;\n\nexport const BtnContainer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Input = styled(Field)`\n  box-sizing: border-box;\n  width: 100%;\n  outline: 1px solid #54adff;\n  border: none;\n  border-radius: 40px;\n  padding: 12px 42px 12px 16px;\n  font-size: 16px;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n  color: ${colors.inputTextColor};\n  &.default {\n    outline: 1px solid ${colors.blueColor};\n  }\n  &.success {\n    outline: 1px solid ${colors.greenStepSuccessColor};\n  }\n  &.error {\n    outline: 1px solid ${colors.redErrorColor};\n  }\n\n`;\nexport const ErrorWrap = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  padding-left: 12px;\n  align-items: center;\n  justify-content: left;\n  height: 14px;\n  color: ${colors.redErrorColor};\n  font-size: 12px;\n  font-weight: 400;\n\n  @media screen and (${devices.tablet}) {\n    height: 32px;\n  }\n`;\nexport const Button = styled.button`\n  width: 100%;\n  padding: 11px 0;\n  margin-bottom: 8px;\n  color: ${colors.whiteBgColor};\n  background-color: ${colors.blueColor};\n  border-radius: 40px;\n  border: none;\n  outline: none;\n  font-family: inherit;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 1.35;\n  letter-spacing: 0.04em;\n  cursor: pointer;\n\n  &:hover {\n    background: ${colors.gradientBlueColor};\n  }\n\n  \n\n  @media screen and (${devices.tablet}) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const Text = styled.p`\n  font-size: 12px;\n  line-height: 1.33;\n  letter-spacing: 0.04em;\n  text-align: center;\n  color: ${colors.inputTextColor};\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 12px;\n  line-height: 1.33;\n  letter-spacing: 0.04em;\n  text-decoration: underline;\n  display: inline-block;\n  color: ${colors.blueColor};\n`;\nexport const IconBtn = styled.button`\n  width: 40px;\n  height: 48px;\n  position: absolute;\n  right: 12px;\n  padding: 12px 0; \n  background-color: ${colors.whiteBgColor};\n  border: none;\n  border-top-right-radius: 40px;\n  border-bottom-right-radius: 40px;\n  cursor: pointer;\n`;\n\nexport const CrossIcon = styled.button`\n  width: 24px;\n  height: 24px;\n  position: absolute;\n  right: 18px;\n padding: 12px 0;\n  background-color: ${colors.whiteBgColor};\n  border: none;\n  border-top-right-radius: 40px;\n  border-bottom-right-radius: 40px;\n  cursor: pointer;\n`;\nexport const ConfirmIcon = styled.button`\n  width: 24px;\n  height: 24px;\n  position: absolute;\n  right: 18px;\n padding: 12px 0;\n  background-color: ${colors.whiteBgColor};\n  border: none;\n  border-top-right-radius: 40px;\n  border-bottom-right-radius: 40px;\n`;\n\nexport const ConfirmMessage = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: left;\n  height: 14px;\n  font-size: 12px;\n  color: ${colors.greenStepSuccessColor};\n  padding-left: 12px;\n  font-size: 12px;\n  font-weight: 400;\n  @media screen and (${devices.tablet}) {\n    height: 32px;\n  }\n`;\n\nexport const PasswordComnfirIcon = styled.button`\n  width: 24px;\n  height: 24px;\n  position: absolute;\n  right: 60px;\n padding: 12px 0;\n  background-color: ${colors.whiteBgColor};\n  border: none;\n \n`;\nexport const PasswordCrossIcon = styled.button`\n  width: 24px;\n  height: 24px;\n  position: absolute;\n  right: 60px;\n padding: 12px 0;\n  background-color: ${colors.whiteBgColor};\n  border: none;\n \n`;\n\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {registerUser} from '../../redux/operations/fetchUser';\n\n\nimport {\n  Button,\n  BtnContainer,\n  ErrorWrap,\n  FormContainer,\n  Input,\n  InputContainer,\n  InputWrap,\n  Title,\n  IconBtn,\n  CrossIcon,\n  ConfirmIcon,\n  StyledLink,\n  ConfirmMessage,\n  PasswordComnfirIcon,\n  PasswordCrossIcon,\n  } from './RegisterForm.styled';\nimport SvgIcon from 'components/SvgIcon/SvgIcon';\nimport { colors } from 'constants/colors';\n\n\n\nconst registrationValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Required')\n    .min(2, 'Name must be at least 2 characters')\n    .max(16, 'Name must be no more than 16 characters'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n  .min(6, 'Password must be at least 6 characters')\n  .max(16, 'Password must be no more than 16 characters')\n  .matches(\n    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\n    'Please create a stronger password'\n  )\n    .required('Required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n    .required('Required'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n};\n\nconst RegisterForm = () => {\n\n  const dispatch = useDispatch();\n\n  \n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [passworConfirmdVisible, setPasswordConfirmVisible] = useState(false);\n\n  const handleSubmit = ({name, email, password}, { resetForm }) => {\n    dispatch(\n      registerUser({\n        name: name,\n        email: email, \n        password: password,\n      })\n    );\n    resetForm();\n  };\n\n  const handleClickPasswordVisibility = () => {\n    setPasswordVisible(!passwordVisible);\n  };\n\n  const handleClickPasswordConfirmVisibility = () => {\n    setPasswordConfirmVisible(!passworConfirmdVisible);\n  };\n\n  const clearInput = (fieldName, setFieldValue) => {\n    setFieldValue(fieldName, '');\n  };\n\n  const hasFieldError = (errors, fieldName) => errors[fieldName];\n  const isFieldValid = (errors, fieldName) => !errors[fieldName];\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={registrationValidationSchema}\n    >\n      {({ isSubmitting, errors, touched, values, setFieldValue }) => (\n        <Form autoComplete=\"off\">\n          <FormContainer>\n            <InputContainer>\n              <Title>Registration</Title>\n              <InputWrap  >\n                <label htmlFor=\"name\" hidden>\n                  Name\n                </label>\n                <Input id=\"name\" type=\"name\" name=\"name\" placeholder=\"Name\" className={`${\"defoult\"}\n${touched.name && !errors.name  && \"success\"}\n                  ${touched.name && errors.name && \"error\"}`}\n                \n/>\n                {touched.name && hasFieldError(errors, 'name') && (\n                  <CrossIcon\n                    type=\"button\"\n                    onClick={() => clearInput('name', setFieldValue)}\n                  >\n                    <SvgIcon\n                      id={'icon-cross-small'}\n                      color={colors.redErrorColor}\n                    />\n                  </CrossIcon>\n                )}\n                {touched.name && isFieldValid(errors, 'name') && (\n                  <ConfirmIcon>\n                    <SvgIcon\n                      id=\"icon-check\"\n                      color={colors.greenStepSuccessColor}\n                    />\n                  </ConfirmIcon>\n                )}\n              </InputWrap>\n              {touched.name && !errors.name ? (\n                <ConfirmMessage>Name is secure</ConfirmMessage>\n              ) : (\n                <ErrorWrap>\n                  <ErrorMessage name=\"name\" component=\"div\" />\n                </ErrorWrap>\n              )}\n              <InputWrap>\n                <label htmlFor=\"email\" hidden>\n                  Email\n                </label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  className={`${\"defoult\"}\n${touched.email && !errors.email  && \"success\"}\n                  ${touched.email && errors.email && \"error\"}`}\n                />\n                {touched.email && hasFieldError(errors, 'email') && (\n                  <CrossIcon\n                    type=\"button\"\n                    onClick={() => clearInput('email', setFieldValue)}\n                  >\n                    <SvgIcon\n                      id={'icon-cross-small'}\n                      color={colors.redErrorColor}\n                    />\n                  </CrossIcon>\n                )}\n                {touched.email && isFieldValid(errors, 'email') && (\n                  <ConfirmIcon>\n                    <SvgIcon\n                      id=\"icon-check\"\n                      color={colors.greenStepSuccessColor}\n                    />\n                  </ConfirmIcon>\n                )}\n              </InputWrap>\n              {touched.email && !errors.email ? (\n                <ConfirmMessage>Email is secure</ConfirmMessage>\n              ) : (\n                <ErrorWrap>\n                  <ErrorMessage name=\"email\" component=\"div\" />\n                </ErrorWrap>\n              )}\n              <InputWrap>\n                <label htmlFor=\"password\" hidden>\n                  Password\n                </label>\n                <Input\n                  id=\"password\"\n                  type={passwordVisible ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  className={`${\"defoult\"}\n                  ${touched.password && !errors.password  && \"success\"}\n                                    ${touched.password && errors.password && \"error\"}`}\n                \n                />\n                 {touched.password && isFieldValid(errors, 'password') && (\n                  <PasswordComnfirIcon>\n                    <SvgIcon\n                      id=\"icon-check\"\n                      color={colors.greenStepSuccessColor}\n                    />\n                  </PasswordComnfirIcon>)}\n                  {touched.password && hasFieldError(errors, 'password') && (\n                  <PasswordCrossIcon\n                    type=\"button\"\n                    onClick={() => clearInput('password', setFieldValue)}\n                  >\n                    <SvgIcon\n                      id={'icon-cross-small'}\n                      color={colors.redErrorColor}\n                    />\n                  </PasswordCrossIcon>\n                )}\n                {passwordVisible ? (\n                  <IconBtn  \n                    type=\"button\"\n                    onClick={handleClickPasswordVisibility}\n                  >\n                    <SvgIcon id={'icon-eye-open'} />\n                  </IconBtn>\n                ) : (\n                  <IconBtn\n                    type=\"button\"\n                    onClick={handleClickPasswordVisibility}\n                  >\n                    <SvgIcon id={'icon-eye-closed'} />\n                  </IconBtn>\n                )}\n               \n                  \n              </InputWrap>\n              {touched.password && !errors.password ? (\n                <ConfirmMessage>Password is secure</ConfirmMessage>\n              ) : (\n                <ErrorWrap>\n                  <ErrorMessage name=\"password\" component=\"div\" />\n                </ErrorWrap>\n              )}\n              <InputWrap>\n                <label htmlFor=\"confirmPassword\" hidden>\n                  Confirm password\n                </label>\n                <Input\n                  id=\"confirmPassword\"\n                  type={passworConfirmdVisible ? 'text' : 'password'}\n                  name=\"confirmPassword\"\n                  placeholder=\"Confirm password\"\n                  className={`${\"defoult\"}\n                  ${touched.confirmPassword && !errors.confirmPassword  && \"success\"}\n                                    ${touched.confirmPassword && errors.confirmPassword && \"error\"}`}\n                />\n                {touched.confirmPassword && isFieldValid(errors, 'confirmPassword') && (\n                  <PasswordComnfirIcon>\n                    <SvgIcon\n                      id=\"icon-check\"\n                      color={colors.greenStepSuccessColor}\n                    />\n                  </PasswordComnfirIcon>)}\n                  {touched.confirmPassword && hasFieldError(errors, 'confirmPassword') && (\n                  <PasswordCrossIcon\n                    type=\"button\"\n                    onClick={() => clearInput('confirmPassword', setFieldValue)}\n                  >\n                    <SvgIcon\n                      id={'icon-cross-small'}\n                      color={colors.redErrorColor}\n                    />\n                  </PasswordCrossIcon>\n                )}\n                {passworConfirmdVisible ? (\n                  <IconBtn\n                    type=\"button\"\n                    onClick={handleClickPasswordConfirmVisibility}\n                  >\n                    <SvgIcon id={'icon-eye-open'} />\n                  </IconBtn>\n                ) : (\n                  <IconBtn\n                    type=\"button\"\n                    onClick={handleClickPasswordConfirmVisibility}\n                  >\n                    <SvgIcon id={'icon-eye-closed'} />\n                  </IconBtn>\n                )}\n                {touched.confirmPassword && !errors.confirmPassword ? (\n                  <ConfirmMessage>Password confirmed</ConfirmMessage>\n                ) : (\n                  <ErrorWrap>\n                    <ErrorMessage name=\"confirmPassword\" component=\"div\" />\n                  </ErrorWrap>\n                )}\n              </InputWrap>\n            </InputContainer>\n            <BtnContainer>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                Registration\n              </Button>\n              <p>\n                Already have an account?{' '}\n                <StyledLink to=\"/login\">Login</StyledLink>\n              </p>\n            </BtnContainer>\n          </FormContainer>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default RegisterForm;\n","import styled from 'styled-components';\nimport { devices } from '../../constants/breakpoints';\nimport bgDesc1 from '../../images/background/bg_desctop1x.png';\nimport bgDesc2 from '../../images/background/bg_desctop2x.png';\nimport bgTabl1 from '../../images/background/bg_tablet1x.png';\nimport bgTabl2 from '../../images/background/bg_tablet2x.png';\nimport bgMob1 from '../../images/background/bg_mobile1x.png';\nimport bgMob2 from '../../images/background/bg_mobile2x.png';\n\nexport const StyledSection = styled.section`\npadding: 40px 0 34px;\nbackground-image: url('${bgMob1}');\nbackground-size: cover;\n\n@media (min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: url('${bgMob2}');\n  }\n\n@media screen and (${devices.tablet}) {\npadding: 80px 0 247px;\nbackground-image: url('${bgTabl1}');\nbackground-size: cover;\n\n@media (min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url('${bgTabl2}');\n    }\n\n}\n\n@media screen and (${devices.desktop}) {\n  padding: 80px 0 75px;\n    background-image: url('${bgDesc1}');\n    \n    @media (min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url('${bgDesc2}');\n    }\n  }\n`;","import RegisterForm from \"components/RegisterForm/RegisterForm\";\nimport { Container } from \"components/Sharedlayout/Sharedlayout.styled\";\nimport { StyledSection } from \"./RegisterPage.styled\";\n\n\nexport default function RegisterPage() {\n  return (\n    <StyledSection>\n<Container>\n   <RegisterForm/>\n   </Container>\n   </StyledSection>\n  )\n}\n"],"names":["FormContainer","styled","_templateObject","_taggedTemplateLiteral","colors","devices","Title","_templateObject2","InputContainer","_templateObject3","InputWrap","_templateObject4","BtnContainer","_templateObject5","Input","Field","_templateObject6","ErrorWrap","_templateObject7","Button","_templateObject8","StyledLink","_templateObject9","Link","_templateObject10","IconBtn","_templateObject11","CrossIcon","_templateObject12","ConfirmIcon","_templateObject13","ConfirmMessage","_templateObject14","PasswordComnfirIcon","_templateObject15","PasswordCrossIcon","_templateObject16","registrationValidationSchema","Yup","shape","name","required","min","max","email","password","matches","confirmPassword","oneOf","initialValues","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","passworConfirmdVisible","setPasswordConfirmVisible","handleClickPasswordVisibility","handleClickPasswordConfirmVisibility","clearInput","fieldName","setFieldValue","hasFieldError","errors","isFieldValid","_jsx","Formik","onSubmit","_ref","_ref2","resetForm","registerUser","validationSchema","children","_ref3","isSubmitting","touched","values","Form","autoComplete","_jsxs","htmlFor","hidden","id","type","placeholder","className","concat","onClick","SvgIcon","color","ErrorMessage","component","disabled","to","StyledSection","bgMob1","bgMob2","bgTabl1","bgTabl2","bgDesc1","bgDesc2","RegisterPage","Container","RegisterForm"],"sourceRoot":""}