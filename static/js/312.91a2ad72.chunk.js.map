{"version":3,"file":"static/js/312.91a2ad72.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import { Field } from 'formik';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { devices } from '../../constants/breakpoints';\nimport { colors } from 'constants/colors';\n\nexport const FormContainer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 40px 12px;\n  gap: 26px;\n  background-color: ${colors.whiteBgColor};\n  box-shadow: 3px 8px 14px rgba(136, 198, 253, 0.19);\n\n  border-radius: 20px;\n\n  @media screen and (${devices.mobile}) {\n    max-width: 480px;\n    border-radius: 40px;\n  }\n\n  @media screen and (${devices.tablet}) {\n    max-width: 608px;\n    padding: 60px 75px;\n    border-radius: 40px;\n    gap: 22px;\n  }\n\n  @media screen and (${devices.desktop}) {\n    gap: 8px;\n  }\n`;\n\nexport const Title = styled.h2`\n  box-sizing: border-box;\n  font-weight: 500;\n  font-size: 24px;\n  line-height: 1.38;\n  color: #111111;\n  margin-bottom: 20px;\n\n  @media screen and (${devices.tablet}) {\n    margin-bottom: 40px;\n    font-size: 36px;\n    letter: 4%;\n    font-weight: 500;\n  }\n`;\nexport const InputContainer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  /* margin-bottom: 24px; */\n`;\nexport const InputWrap = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const BtnContainer = styled.div`\n  box-sizing: border-box;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Input = styled(Field)`\n  box-sizing: border-box;\n  width: 100%;\n  outline: 1px solid #54adff;\n  border: none;\n  border-radius: 40px;\n  padding: 12px 42px 12px 16px;\n  font-size: 16px;\n  line-height: 1.5;\n  letter-spacing: 0.04em;\n  color: #888888;\n`;\nexport const ErrorWrap = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  padding-left: 12px;\n  align-items: center;\n  justify-content: left;\n  height: 14px;\n  color: #f43f5e;\n  font-size: 14px;\n  font-weight: 400;\n\n  @media screen and (${devices.tablet}) {\n    height: 32px;\n  }\n`;\nexport const Button = styled.button`\n  width: 100%;\n  padding: 11px 0;\n  margin-bottom: 8px;\n  color: #ffffff;\n  background-color: #54adff;\n  border-radius: 40px;\n  border: none;\n  outline: none;\n  font-family: inherit;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 1.35;\n  letter-spacing: 0.04em;\n  cursor: pointer;\n\n  &:hover {\n    background: linear-gradient(290.46deg, #419ef1 0%, #9bd0ff 107.89%);\n  }\n\n  @media screen and (${devices.tablet}) {\n    margin-bottom: 16px;\n  }\n`;\n\nexport const Text = styled.p`\n  font-size: 12px;\n  line-height: 1.33;\n  letter-spacing: 0.04em;\n  text-align: center;\n  color: #888888;\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 12px;\n  line-height: 1.33;\n  letter-spacing: 0.04em;\n  text-decoration: underline;\n  display: inline-block;\n  color: #54adff;\n`;\nexport const IconBtn = styled.button`\n  width: 70px;\n  height: 48px;\n  position: absolute;\n  right: 0;\n    padding: 12px 0; \n  background-color: #ffffff;\n  border: none;\n  border-top-right-radius: 40px;\n  border-bottom-right-radius: 40px;\n  cursor: pointer;\n`;\n\nexport const CrossIcon = styled.button`\n  width: 24px;\n  height: 24px;\n  position: absolute;\n \n  right: 18px;\n padding: 12px 0;\n  background-color: #ffffff;\n  border: none;\n  border-top-right-radius: 40px;\n  border-bottom-right-radius: 40px;\n  cursor: pointer;\n`;\n\nexport const PasswordIcon = styled.button`\n  width: 24px;\n  height: 24px;\n  position: absolute;\n  right: 18px;\n  padding: 12px 0;\n  background-color: #ffffff;\n  border: none;\n  border-top-right-radius: 40px;\n  border-bottom-right-radius: 40px;\n`;\n\nexport const PasswordMessage = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: left;\n  height: 24px;\n  font-size: 12px;\n  color: #00c3ad;\n  padding-left: 12px;\n  font-size: 14px;\n  font-weight: 400;\n  @media screen and (${devices.tablet}) {\n    height: 32px;\n  }\n`;","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { logIn } from '../../redux/operations/fetchUser';\n\nimport {\n  Button,\n  BtnContainer,\n  ErrorWrap,\n  FormContainer,\n  Input,\n  InputContainer,\n  InputWrap,\n  Title,\n  IconBtn,\n  CrossIcon,\n  PasswordIcon,\n  StyledLink,\n  PasswordMessage,\n} from './LoginForm.styled';\nimport SvgIcon from 'components/SvgIcon/SvgIcon';\nimport { colors } from 'constants/colors';\n\nconst emailValid =\n  /^([a-zA-Z0-9]{1}[a-zA-Z0-9_\\-.]{1,})@([a-zA-Z0-9_\\-.]+)\\.([a-zA-Z]{2,4})$/;\n\nconst LoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Required')\n    .matches(emailValid, 'Invalid email address')\n    .email(),\n  password: Yup.string()\n    // .max(16, 'Password must be no more than 16 characters')\n    // .min(6, 'Password must be at least 6 characters')\n    .required('Required'),\n});\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const [password, setPassword] = useState(false);\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { email, password } = values;\n    dispatch(\n      logIn({\n        email: email,\n        password: password,\n      })\n    );\n\n    resetForm();\n  };\n  const clearInput = (fieldName, setFieldValue) => {\n    setFieldValue(fieldName, '');\n  };\n\n  const togglePassword = () => setPassword(!password);\n  const hasFieldError = (errors, fieldName) => errors[fieldName];\n  const isFieldValid = (errors, fieldName) => !errors[fieldName];\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={LoginSchema}\n    >\n      {({ isSubmitting, errors, touched, values, setFieldValue }) => (\n        <Form autoComplete=\"off\">\n          <FormContainer>\n            <InputContainer>\n              <Title>Login</Title>\n              <InputWrap>\n                <label htmlFor=\"email\" hidden>\n                  Email\n                </label>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  autoComplete=\"off\"\n                  placeholder={'Email'}\n                />\n                {touched.email && hasFieldError(errors, 'email') && (\n                  <CrossIcon\n                    type=\"button\"\n                    onClick={() => clearInput('email', setFieldValue)}\n                  >\n                    <SvgIcon\n                      id={'icon-cross-small'}\n                      color={colors.redErrorColor}\n                    />\n                  </CrossIcon>\n                )}\n                {touched.email && isFieldValid(errors, 'email') && (\n                  <PasswordIcon>\n                    <SvgIcon\n                      id=\"icon-check\"\n                      color={colors.greenStepSuccessColor}\n                    />\n                  </PasswordIcon>\n                )}\n              </InputWrap>\n              {touched.email && !errors.email ? (\n                <PasswordMessage>Email is secure</PasswordMessage>\n              ) : (\n                <ErrorWrap>\n                  <ErrorMessage name=\"email\" component=\"div\" />\n                </ErrorWrap>\n              )}\n              <InputWrap>\n                <label htmlFor=\"password\" hidden>\n                  Password\n                </label>\n                <Input\n                  id=\"password\"\n                  type={password ? 'text' : 'password'}\n                  name=\"password\"\n                  placeholder=\"Password\"\n                   className={\n                  (values.password === \"\" && \"default\") ||\n                  (touched.password && errors.password && \"error\") ||\n                  (!errors.password && \"success\")\n                }\n                />\n                {password ? (\n                  <IconBtn type=\"button\" onClick={togglePassword}>\n                    <SvgIcon id={'icon-eye-open'} />\n                  </IconBtn>\n                ) : (\n                  <IconBtn type=\"button\" onClick={togglePassword}>\n                    <SvgIcon id={'icon-eye-closed'} />\n                  </IconBtn>\n                )}\n\n                {touched.password && !errors.password ? (\n                  <PasswordMessage>Password is secure</PasswordMessage>\n                ) : (\n                  <ErrorWrap>\n                    <ErrorMessage name=\"password\" component=\"div\" />\n                  </ErrorWrap>\n                )}\n              </InputWrap>\n            </InputContainer>\n            <BtnContainer>\n              <Button type=\"submit\" disabled={isSubmitting}>\n                Login\n              </Button>\n              <p>\n                Don't have an account?{' '}\n                <StyledLink to=\"/Register\">Register</StyledLink>\n              </p>\n            </BtnContainer>\n          </FormContainer>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;","import styled from 'styled-components';\nimport { devices } from '../../constants/breakpoints';\nimport bgDesc1 from '../../images/background/bg_desctop1x.png';\nimport bgDesc2 from '../../images/background/bg_desctop2x.png';\nimport bgTabl1 from '../../images/background/bg_tablet1x.png';\nimport bgTabl2 from '../../images/background/bg_tablet2x.png';\nimport bgMob1 from '../../images/background/bg_mobile1x.png';\nimport bgMob2 from '../../images/background/bg_mobile2x.png';\n\nexport const StyledSection = styled.section`\npadding: 40px 0 0;\nbackground-image: url('${bgMob1}');\nbackground-size: cover;\n\n@media (min-device-pixel-ratio: 2),\n    (min-resolution: 192dpi),\n    (min-resolution: 2dppx) {\n    background-image: url('${bgMob2}');\n  }\n\n@media screen and (${devices.tablet}) {\npadding: 80px 0 0;\nbackground-image: url('${bgTabl1}');\nbackground-size: cover;\n\n@media (min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url('${bgTabl2}');\n    }\n\n}\n\n@media screen and (${devices.desktop}) {\n    background-image: url('${bgDesc1}');\n    \n    @media (min-device-pixel-ratio: 2),\n      (min-resolution: 192dpi),\n      (min-resolution: 2dppx) {\n      background-image: url('${bgDesc2}');\n    }\n  }\n`;","import LoginForm from \"components/LoginForm/LoginForm\";\nimport { Container } from \"components/Sharedlayout/Sharedlayout.styled\";\nimport { StyledSection } from \"./LoginPage.styled\";\n\nexport default function LoginPage() {\n\n  return (\n    <> \n       <StyledSection>\n      <Container>\n        <LoginForm/>\n       </Container>\n    </StyledSection>\n    </>\n   \n    \n  )\n}\n"],"names":["FormContainer","styled","_templateObject","_taggedTemplateLiteral","colors","devices","Title","_templateObject2","InputContainer","_templateObject3","InputWrap","_templateObject4","BtnContainer","_templateObject5","Input","Field","_templateObject6","ErrorWrap","_templateObject7","Button","_templateObject8","StyledLink","_templateObject9","Link","_templateObject10","IconBtn","_templateObject11","CrossIcon","_templateObject12","PasswordIcon","_templateObject13","PasswordMessage","_templateObject14","LoginSchema","Yup","shape","email","required","matches","password","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","setPassword","togglePassword","hasFieldError","errors","fieldName","isFieldValid","_jsx","Formik","initialValues","onSubmit","values","_ref","resetForm","logIn","validationSchema","children","_ref2","isSubmitting","touched","setFieldValue","Form","autoComplete","_jsxs","htmlFor","hidden","type","name","id","placeholder","onClick","clearInput","SvgIcon","color","ErrorMessage","component","className","disabled","to","StyledSection","bgMob1","bgMob2","bgTabl1","bgTabl2","bgDesc1","bgDesc2","LoginPage","_Fragment","Container","LoginForm"],"sourceRoot":""}